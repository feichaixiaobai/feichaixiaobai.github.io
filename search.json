[{"title":"AndroidROM编译","url":"/2025/10/18/AndroidROM%E7%BC%96%E8%AF%91/","content":"引言⚠⚠⚠：此教程仅适用于能解锁bootloader的机型，如：米，一加，pixel……Android Rom的编译非常吃配置和硬盘，Android版本越高，Android源码越来越大，所需要硬盘空间也是越来越大。VPS同理，如果你有💴，可以选择VPS，建议选择境外VPS。\n以最新的android16配置为例：最低配置：CPU 4–8 核，16 GB RAM（尽可能 32GB），至少 500 GB SSD（最好 NVMe），启用 zram&#x2F;swap。可做小规模或实验性构建，但会非常慢且容易 OOM推荐配置：8–16 核&#x2F;16+ 线程，32–64 GB RAM，1 TB NVMe SSD（源码+构建输出至少留 400GB 可用）。这样能较顺畅地做全量与增量构建。理想配置：大量核（32+ 逻辑核）、64 GB 或更多 RAM（Google 推荐 64 GB）、2 TB+ NVMe（或多盘分区），配合 ccache &#x2F; distcc &#x2F; ramdisk，可显著加速。官方内部使用多核 + 64GB 举例。\n介绍可编译的开源类原生：lineageOSGrapheneOS (仅限pixel)CrdroidEvolutionOSRisingOSDrepFest……  \n构建本文以Xiaomi13 lineageOS为例  \n安装工具如果您之前没有安装过adb和fastboot，可以从Google 下载。运行以下命令解压：\nunzip platform-tools-latest-linux.zip -d ~\n\n提示：该文件的名称可能与此命令中的名称不完全相同，因此请进行相应调整。\n现在你需要将adb和添加fastboot到你的 PATH 中。打开~&#x2F;.profile并添加以下内容：\n# add Android SDK platform tools to pathif [ -d &quot;$HOME/platform-tools&quot; ] ; then    PATH=&quot;$HOME/platform-tools:$PATH&quot;fi\n\n然后，运行source ~&#x2F;.profile以更新您的环境。\n安装构建包构建 LineageOS 需要几个软件包。您可以使用发行版的软件包管理器来安装它们。\n提示： Linux 中的软件包管理器是一个用于在计算机上安装或删除软件（通常来自互联网）的系统。在 Ubuntu 系统中，您可以使用 Ubuntu 软件中心。更棒的是，您还可以apt install 直接在终端中使用该命令。要构建 LineageOS，您需要：\nbc bison build-essential ccache curl flex g++-multilib gcc-multilib git git-lfs gnupg gperf imagemagick protobuf-compiler python3-protobuf lib32readline-dev lib32z1-dev libdw-dev libelf-dev lz4 libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev\n\n对于 Ubuntu 23.10（mantic）或更新版本，请libncurses5从 23.04（lunar）进行安装，如下所示：\nwget https://archive.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2_amd64.deb &amp;&amp; sudo dpkg -i libtinfo5_6.3-2_amd64.deb &amp;&amp; rm -f libtinfo5_6.3-2_amd64.debwget https://archive.ubuntu.com/ubuntu/pool/universe/n/ncurses/libncurses5_6.3-2_amd64.deb &amp;&amp; sudo dpkg -i libncurses5_6.3-2_amd64.deb &amp;&amp; rm -f libncurses5_6.3-2_amd64.deb\n\n对于早于 23.10（mantic）的 Ubuntu 版本，只需安装：\nlib32ncurses5-dev libncurses5 libncurses5-dev\n\n此外，对于早于 20.04（focal）的 Ubuntu 版本，还需要安装：\nlibwxgtk3.0-dev\n\nJava不同版本的 LineageOS 需要不同的 JDK（Java 开发工具包）版本。\n\nLineageOS 18.1+：OpenJDK 11（包含在源下载中）  \nLineageOS 16.0-17.1：OpenJDK 1.9（包含在源下载中）  \nLineageOS 14.1-15.1：OpenJDK 1.8（安装openjdk-8-jdk）注意：要构建这些版本，您需要从中删除TLSv1和。TLSv1.1jdk.tls.disabledAlgorithms&#x2F;etc&#x2F;java-8-openjdk&#x2F;security&#x2F;java.security\nLineageOS 11.0-13.0：OpenJDK 1.7（安装openjdk-7-jdk）\n\nUbuntu 16.04 及更新版本在标准软件包仓库中没有 OpenJDK 1.7。请参阅Ask Ubuntu问题“如何在 Ubuntu 16.04 或更高版本上安装 openjdk 7？ ”。请注意，使用 PPA openjdk-r 的建议已过时（PPA 从未更新其提供的 openjdk-7-jdk，因此缺少安全修复）；即使该答案获得最多赞，也请跳过。\nPython不同版本的 LineageOS 需要不同的默认 Python 版本。\n\nLineageOS 17.1+：Python 3（安装python-is-python3）  \nLineageOS 11.0-16.0：Python 2（安装python-is-python2）\n\n如果您的默认设置是python3，但您正在构建需要 的分支python2，则有多种方法可以使用它，例如手动进行符号链接或为其创建虚拟环境。我们推荐后者：\n使用 生成虚拟环境virtualenv –python&#x3D;python2 &#x2F;.lineage_venv。之后，在每个需要的终端中python2运行 来激活它&#x2F;.lineage_venv&#x2F;bin&#x2F;activate。\n路径~&#x2F;.lineage_venv可以自由选择，这只是一个例子！\n创建目录您需要在构建环境中设置一些目录。\n要创建它们：\nmkdir -p ~/binmkdir -p ~/android/lineage该&#x2F;bin目录将包含 git-repo 工具（通常称为“repo”），并且该&#x2F;android&#x2F;lineage目录将包含 LineageOS 的源代码。\n安装repo命令输入以下内容下载repo二进制文件并使其可执行（可运行）：\ncurl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repochmod a+x ~/bin/repo\n\n将~&#x2F;bin目录放入执行路径中在较新版本的 Ubuntu 中，它&#x2F;bin应该已经存在于你的 PATH 中。你可以使用文本编辑器打开&#x2F;.profile并验证以下代码是否存在（如果缺少，请添加）：\n#set PATH so it includes user&#x27;s private bin if it existsif [ -d &quot;$HOME/bin&quot; ] ; then    PATH=&quot;$HOME/bin:$PATH&quot;fi\n\n然后，运行source ~&#x2F;.profile以更新您的环境。\n配置 git鉴于repo需要您识别自己才能同步 Android，请运行以下命令来配置您的git身份\ngit config --global user.email &quot;you@example.com&quot;  git config --global user.name &quot;Your Name&quot;```  由于规模较大，某些仓库配置为lfs或Large File Storage。为确保您的发行版已为此做好准备，请运行:```bashgit lfs install```  为了避免Change-Id:提交消息中出现重复的尾部，尤其是在挑选更改时，请Change-Id:向 git 制作一个已知的尾部：```bashgit config --global trailer.changeid.key &quot;Change-Id&quot;  \n\n开启缓存以加速构建ccache如果您想通过运行以下命令来加速后续构建：\nexport USE_CCACHE=1export CCACHE_EXEC=/usr/bin/ccache\n\n并将该行添加到文件中。然后，输入以下命令~&#x2F;.bashrc指定要使用的最大磁盘空间量：ccache\nccache -M 50G\n\n其中50G对应 50GB 的缓存。此操作只需运行一次。25GB 到 100GB 之间的任何缓存都会显著提升构建速度（例如，通常 1 小时的构建时间可以缩短到 20 分钟）。如果您只为一台设备构建，25GB 到 50GB 的缓存就足够了。如果您计划为多台不共享相同内核源码的设备构建，则建议使用 75GB 到 100GB 的缓存。这些空间将永久占用您的硬盘空间，因此请考虑到这一点。\n您还可以启用可选的ccache压缩功能。虽然这可能会略微降低性能，但它会增加缓存中可容纳的文件数量。要启用此功能，请运行：\nccache -o compression=true\n\n注意：如果启用压缩，ccache大小可能会更低（每个设备的目标大小约为 20GB）。\n初始化 LineageOS 源存储库输入以下内容来初始化存储库：\ncd ~/android/lineagerepo init -u https://github.com/LineageOS/android.git -b lineage-23.0 --git-lfs --no-clone-bundle\n\n下载源代码要开始将源代码下载到您的计算机，请输入以下内容：\nrepo syncLineageOS 清单包含一个合理的 repo 默认配置，我们强烈建议您使用（即不添加任何同步选项）。作为参考，我们的默认值为-j 4和-c。该-j 4部分表示同时支持四个线程&#x2F;连接。如果您在同步时遇到问题，可以将其降低到-j 3或-j 2。另一方面，-c使 repo 仅提取当前分支，而不是 GitHub 上所有可用的分支。\n注意：这可能需要一段时间，具体取决于您的网速。在此期间，您可以去喝杯啤酒&#x2F;咖啡&#x2F;茶&#x2F;小睡一会儿！\n提示：该repo sync命令用于更新 LineageOS 和 Google 的最新源代码。请记住这一点，因为您可能需要每隔几天执行一次，以保持代码库的新鲜和最新。但请注意，如果您进行了任何更改，运行该命令repo sync可能会将其清除！\n准备构建环境进入源代码的根目录：  \ncd ~/android/lineage```  设置您的构建环境：```bashsource build/envsetup.sh\n\n您可以通过输入以下命令来检查命令是否正确执行：\ncroot\n\n然后，您的 shell 将导航到源的根目录，~&#x2F;android&#x2F;lineage或者给出错误。\n准备特定于设备的代码breakfast fuxi\n这将下载您设备的特定配置和 内核。\n警告重要提示：某些设备需要先填充供应商目录，早餐操作才能成功。如果您在此处收到有关供应商 makefile 的错误，请跳转到提取专有 blob。早餐操作的第一部分应该已经成功，完成后您可以重新运行 breakfast  \n提取专有 blob注意： 此步骤需要您拥有一个已运行最新 LineageOS 的设备，该版本基于您想要构建的分支。如果您没有这样的设备，请参阅从可安装 zip 文件中提取专有 blob。现在，请确保您的小米 13 已通过 USB 数据线连接到电脑，并启用 ADB 和 root 权限，并且位于该 ~&#x2F;android&#x2F;lineage&#x2F;device&#x2F;xiaomi&#x2F;fuxi文件夹中。然后运行以下extract-files.sh脚本extract-files.py：\n./extract-files.sh\n\n或者，对于 Python 脚本：\n./extract-files.py\n\n这些 Blob 应该被拉入&#x2F;android&#x2F;lineage&#x2F;vendor&#x2F;xiaomi文件夹。如果您看到“命令未找到”错误，adb可能需要将其放入&#x2F;bin。\n开始构建开始构建吧！现在，输入：\ncrootbrunch fuxi\n\n构建应该开始。\n安装构建假设构建完成且没有错误（完成后会很明显），在构建运行的终端窗口中输入以下内容：\ncd $OUT\n\n在那里，您可以找到所有已创建的文件。比较有趣的两个文件是：\n\nrecovery.img，这是 LineageOS 恢复映像。  \nlineage-23.0-20251017-UNOFFICIAL-fuxi.zip，即 LineageOS 安装包。\n\n最后编译成功后，你就可以通过twrp或者fastboot刷入编译后的产物，测试是否能开机，并修bug\n","categories":["Android"],"tags":["教程"]},{"title":"GFW的历史","url":"/2025/10/20/GFW%E7%9A%84%E5%8E%86%E5%8F%B2/","content":"🧱 防火长城（GFW）的由来与演变\n“防火长城”（Great Firewall of China，简称 GFW）是世界上规模最大、最复杂的互联网过滤与监控系统之一。它不仅是一套技术体系，更是一项政策与网络主权战略。本文将从 起源、发展、技术机制、影响与争议 等方面系统解析 GFW 的形成过程。\n\n\n🌏 一、何谓防火长城（GFW）“防火长城”（Great Firewall）是对中国大陆网络出入境过滤系统的俗称。它的核心目标是：控制国际互联网内容的访问、过滤敏感信息，并保障国家网络主权。\n📖 官方并无 “GFW” 一词，它是国外研究者与技术社群对该系统的非正式称呼。\n\n🕰 二、历史起源与发展阶段1️⃣ 初期探索（1990s）\n1994 年：中国正式接入国际互联网。  \n1996 年：《计算机信息网络国际联网管理暂行规定》出台，确立“统一出入口”的监管模式。  \n这一时期，国家意识到需要控制跨境信息流通，防止“有害信息”传播。\n\n2️⃣ 系统建设（2000s）\n2000 年前后，GFW 的雏形建立。  \n主要封锁手段包括：\nIP 封锁（直接屏蔽服务器地址）  \nDNS 污染（篡改域名解析）  \n关键词过滤（基于内容匹配）\n\n\n2009 年起，Google、Facebook、YouTube 等主流国外网站陆续被封锁。\n\n3️⃣ 技术升级（2010s 至今）\n随着 HTTPS 普及、流量加密普遍化，GFW 开始使用 深度包检测（DPI） 技术。  \n对流量特征、TLS 握手、SNI 信息进行分析与阻断。  \n同时发展出更复杂的检测与“主动探测”机制，可识别 VPN、代理工具、Tor、Shadowsocks 等。\n\n\n⚙️ 三、GFW 的技术机制\n\n\n技术手段\n原理说明\n示例\n\n\n\nIP 封锁\n阻断访问目标 IP 地址的所有流量\n无法连接被封网站\n\n\nDNS 污染\n返回错误或假 IP 地址\ngoogle.com 解析错误\n\n\nHTTP 关键字过滤\n检查明文 HTTP 请求中的关键词\n涉及政治敏感词即被断开\n\n\n深度包检测（DPI）\n分析加密流量的特征\n检测 VPN 协议、TLS 握手模式\n\n\n主动探测\n主动扫描疑似代理节点以验证用途\n机场&#x2F;V2Ray 节点被封\n\n\n连接重置（RST）\n当检测到违规请求时主动断开连接\n浏览器提示连接被重置\n\n\n📌 这些机制通常由国家骨干网出口处的设备完成，例如部署在中国电信、中国联通、中国移动等国际出口节点。\n\n🧩 四、GFW 的组成架构防火长城不是单一设备，而是由多个层面组成的综合体系：\n\n法律与政策层  \n\n1996 年的联网管理规定  \n《网络安全法》（2017）  \n《数据安全法》《个人信息保护法》等这些为网络审查提供法律依据。\n\n\n技术层  \n\n各类封锁设备、DNS 服务器、过滤系统  \n部署于国家出口路由器、骨干交换机处\n\n\n运营与管理层  \n\n三大运营商承担流量监控与过滤任务  \n多部门（如网信办、工信部）协同监管\n\n\n\n\n🧭 五、目的与战略意义\n\n\n目标类型\n说明\n\n\n\n国家安全\n防止境外势力通过互联网影响国内舆论\n\n\n社会稳定\n阻断谣言与政治敏感内容传播\n\n\n经济保护\n为本土互联网企业（如百度、腾讯）提供竞争空间\n\n\n网络主权\n强调“互联网是主权空间的一部分”理念\n\n\n\n🌐 六、影响与全球反响正面作用\n促进了中国本土互联网生态的形成（百度、腾讯、阿里巴巴等得以发展）。\n加强了国家对数据与网络安全的掌控。\n\n负面影响\n普通用户难以访问国际主流网站与学术资源。  \n对跨国公司、研究人员、开发者造成沟通障碍。  \n促使“科学上网”与“翻墙”技术兴起，形成“封与反封”的博弈。\n\n\n⚔️ 七、GFW 与“Great Cannon”的关系2015 年，国外研究者发现中国互联网中存在名为 Great Cannon（大炮） 的系统。它可劫持 HTTP 流量，将普通用户浏览请求改造成攻击流量，用于大规模 DDoS 攻击。研究认为该系统与 GFW 紧密协作，但职能不同：  \n\nGFW：负责屏蔽与过滤  \nGreat Cannon：负责注入与攻击\n\n\n\n⚖️ 八、争议与展望争议焦点\n是否限制公民的信息自由？  \n如何在信息安全与言论自由之间取得平衡？  \n对外资互联网服务的进入壁垒是否合理？\n\n未来趋势\n审查技术趋向 AI 化、自动化。  \n增强 HTTPS&#x2F;TLS 指纹分析能力。  \n政策层面或将继续强化“数字\n\n","categories":["GFW"],"tags":["GFW"]},{"title":"机场与VPN","url":"/2025/10/20/%E6%9C%BA%E5%9C%BA%E4%B8%8Evpn/","content":"🚀 机场与 VPN 的全面区别：速度 vs 安全，哪种更适合你？\n想访问被限制的网站、使用海外 AI 工具（如 ChatGPT、Claude、Midjourney），你可能听说过“机场”或“VPN”。它们看似功能相似，其实原理、使用体验、安全性都完全不同。本文将带你全面了解机场与 VPN 的区别，帮你选对工具。\n\n\n🧭 一、什么是“机场”？“机场”并不是指真的机场 ✈️，而是代理节点服务提供商的俗称。它基于 Shadowsocks (SS)、V2Ray (VMess&#x2F;VLess)、Trojan 等协议，通过中转服务器，让你绕过网络限制。\n📌 特点总结：\n\n使用代理技术（而非系统级 VPN）\n用户通过“订阅链接”导入 Clash、Shadowrocket 等客户端\n可自由切换不同国家&#x2F;地区的节点\n\n\n✅ 机场 &#x3D; 一组高速代理节点，让你轻松访问全球网络。\n\n\n🔒 二、什么是 VPN？VPN，全称 Virtual Private Network（虚拟专用网络）。它通过建立加密隧道，把你的设备流量加密后发送到 VPN 服务器，从而隐藏真实 IP 与访问行为。\n📌 特点总结：\n\n加密整个网络连接（系统级）\n常用于公司远程办公、数据加密、隐私保护\n协议包括 OpenVPN、WireGuard、IKEv2 等\n\n\n✅ VPN &#x3D; 一个安全加密的“虚拟通道”，保护你的隐私。\n\n\n⚙️ 三、技术原理对比\n\n\n对比项\n机场\nVPN\n\n\n\n核心协议\nSS &#x2F; SSR &#x2F; V2Ray &#x2F; Trojan\nOpenVPN &#x2F; WireGuard &#x2F; IKEv2\n\n\n加密层级\n应用层\n网络层\n\n\n加密强度\n中等\n高\n\n\n流量分流\n支持（可设置国内直连）\n不支持（全局加密）\n\n\n速度表现\n较快（可选节点）\n稍慢（加密开销大）\n\n\n隐私保护\n一般\n强\n\n\n是否易被封锁\n较高\n中等\n\n\n\n💡 四、使用体验区别🚀 机场：灵活、快速、性价比高✅ 优点：\n\n节点多，可自由切换国家  \n分流策略灵活（国内直连 + 国外代理）  \n速度快，适合视频流媒体与 AI 工具\n\n⚠️ 缺点：\n\n依赖节点质量与机场维护  \n无统一安全标准，风险由服务商决定\n\n\n🧱 VPN：安全、稳定、隐私强✅ 优点：\n\n全流量加密，保护隐私  \n企业、机构广泛使用  \n上手简单（开启即连）\n\n⚠️ 缺点：\n\n无法分流，全部流量走 VPN  \n速度略慢，部分被封禁\n\n\n🎯 五、适用场景推荐\n\n\n场景\n推荐\n\n\n\n访问 Google、YouTube、X（Twitter）\n✅ 机场\n\n\n使用 ChatGPT &#x2F; Midjourney &#x2F; Gemini 等 AI 工具\n✅ 机场\n\n\n企业远程办公、公司内网访问\n✅ VPN\n\n\n注重隐私、安全通信\n✅ VPN\n\n\n想看 Netflix、Disney+ 等外区视频\n✅ 机场\n\n\n想加密所有设备流量\n✅ VPN\n\n\n\n🛡 六、安全性与合规性\n\n\n项目\n机场\nVPN\n\n\n\n加密方式\n中等强度代理加密\n系统级隧道加密\n\n\n日志记录\n依服务商不同\n部分 VPN 有隐私政策\n\n\n合法性\n视地区而定（部分敏感）\n一般用于企业，较安全\n\n\n匿名性\n较低\n较高\n\n\n\n⚠️ 建议仅在合规、合法范围内使用任何网络工具。请勿用于违法或侵权行为。\n\n\n🧩 七、总结：怎么选？\n\n\n需求\n推荐方案\n\n\n\n想访问海外网站、AI 工具、视频平台\n机场（灵活高效）\n\n\n想保护隐私、安全传输\nVPN（安全可靠）\n\n\n想兼顾两者\n混合使用（VPN + 代理分流）\n\n\n\n✈️ 八、结语“机场”代表自由与速度，适合追求体验与效率的个人用户；“VPN”象征安全与隐私，适合注重保密与稳定的专业人士。  \n无论你选择哪一种，关键在于理解原理、明确需求、合理使用。希望这篇文章能帮你找到最适合自己的网络通道。\n","categories":["GFW"],"tags":["GFW"]},{"title":"android kernel编译","url":"/2025/10/10/android-kernel%E7%BC%96%E8%AF%91/","content":"引言首先是一个简单的自述。我是一个业余的安卓设备玩家，所以这里讲述的东西都是交流的。经验丰富的朋友可以无视。其次，这个教程我详细讲一下，以帮助新手度过试错期。\n\n编译Android内核之前需要准备的东西：1.有一台已经解锁bootloder的手机2.一个linux环境，虚拟机，wsl，termux等都可以3.能够认真耐心看教程\n紧接着1.首先确定您的手机代号（中文）xiaomi可以访问xiaomirom.com来查找您的手机代号2.从您品牌官方获取开源代码：例如小米的开源地址( https://github.com/ MiCode&#x2F;Xiaomi_Kernel_OpenSource )3.如果不想用官方的开源，可以选择第三方开源，比如LineageOS等等4.如果你的机子既没有官方开源也没有第三方开源，那这个看你可以省点开源。5.实践最重要！实践最重要！实践最重要！\n\n开始操作！安装基本操作依赖\n1.我会按照Ubuntu为例子去告诉你怎么做：打开您的终端，使用以下命令来安装基本的依赖项：\napt-get install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git git-lfs gnupg gperf imagemagicklib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5 libncurses5-devlibsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsyncschedtool squashfs-tools xsltproczip zlib1g-dev\n\n如果你的系统缺少这些依赖环境，就会报错。当然，上述这些并不一定能100%保证你完全不缺少依赖环境。你需要继续升级的内核和系统进行调整。\n2.编译准备首先要选择合适的交叉编译器：小米大部分交叉编译器都兼容华为：在不修改源码的情况下，仅兼容谷歌GCC。一加：大部分交叉编译器都兼容\n这里列举几个编译器：Google的GCC交叉编译器：Google GCC: aarch64-linux-android-4.9打开此页面你会看到琳琅满目目的选择，请按照你的安卓版本搜索，例如：android-t (安卓13)。\n谷歌的Clang：Google Clang\n打开此页面你会看到琳满目的选择，请按照你的Android版本搜索，例如：android-13 (Android13)。\n常用的第三方交叉编译器推荐：  Proton-Clang由kdrag0n开发Clang交叉编译器。详情参见项目主页。\n⚠⚠⚠：较新版本的内核靠clang可以编译，基本不需要GCC老版本的内核需要GCC或者clang+GCC，具体需要哪个编译器哪个版本，还得根据你自己的内核而定\n\n3.拉取源及其工具链1.拉取源码：例如拉取LineageOS的内核源码:\ngit clone https://github.com/LineageOS/android_kernel_xiaomi_sm8550.git --depth=1\n\n2.拉取源码后先去你的内核根目录&#x2F;arch&#x2F;arm64(根据你的设备架构来定)&#x2F;config或者&#x2F;config&#x2F;vendor里找到你的配置文件（一般来说是：机箱代号_defconfig）比如说：我在一个目录下创建了一个kernel文件夹，把在kernel文件夹中取了源码并命名xxx，那外围配置文件在kernel&#x2F;xxx&#x2F;arch&#x2F;arm64&#x2F;config中或者在kernel&#x2F;xxx&#x2F; arch&#x2F;arm64&#x2F;config&#x2F;vendor中\n3.如果里面没有config文件，那么你就需要从你的官方boot里面解压出来了，先下载或者从你的设备上解压出来，上传到Linux里面环境，cd到内核源码里面，执行scripts&#x2F;extract-ikconfig工具提取配置信息。\ncd 你的内核源码路径./scripts/extract-ikconfig 你的boot分区文件路径 &gt;&gt; device_configcp device_config arch/你的设备cpu架构/configs/你的设备代号_config#或者这样cp device_config arch/你的cpu架构/configs/temp device_config#取一个临时的名称\n\n\n4.开始编译cd到你的内核源码路径\n如果使用GCC：1.设置环境变量PATH：\nexprot PATH=&quot;/XXXXXX/bin:$PATH&quot;\nXXXXXX是你的就交叉编译器的具体路径的根目录。这个命令的含义是设置环境变量PATH，并且只在这个语句内有效。例如我的交叉编译器路径是：export PATH&#x3D;“&#x2F;home&#x2F;ubuntu&#x2F;gcc_4.9&#x2F;bin:$PATH”\n2.声明你要编译的内核架构：\nexport ARCH=arm64\nexport SUBARCH=arm64\n3.声明交叉编译器的：export CROSS_COMPILE&#x3D;aarch64-linux-gnu-该命令的含义是声明交叉编译器的名称是aarch64-linux-gnu-，注意名称-是必须的。这个名称的具体名称是根据您下载的交叉器编译器决定的。请勿直接照抄。\n4.声明你要编译内核的defconfig：make ARCH=arm64 O=out XXXXX_defconfig 这个的含义是在ARM64架构下，使用指定的内核名称（XXXXX）生成一个默认的配置文件，该配置文件包含了编译内核所需的配置信息，如启用或禁用的功能、驱动程序选项等。\nO&#x3D;out：此参数用于指定构建输出目录的参数。通常情况下，内核编译生成的文件放在指定的输出目录中，以保持项目的整洁性。\n这样你出来编译的内核就可以放在内核中根目录的&#x2F;out&#x2F;arch&#x2F;arm64&#x2F;boot&#x2F;内。一般编译出来的是Image.gz或者Image。gz-dtb。\n\n5.运行编译make ARCH=arm64 O=out -jX 2&gt;&amp;1 | tee kernel_log.log这个命令，用于编译Linux内核，把编译过程中的标准输出和标准错误输出同时输出到一个文件kernel_log.log中。这样假设你可以编译错误了，在kernel_log.log内查询你的错误，方便你修改错误。-jX:这个参数用于指定硬件编译的线程数，其中 X 应该替换为一个整数。这允许同时编译多个文件，以加快编译过程。通常，X 的值会设置为计算机上可用的CPU核心数量乘以2，以最大程度利用系统资源。例如我的CPU有4个核心，就使用-j8。\n\n6.等待编译中结果路径报错，需要您根据报错内容去解决错误，一般编译产物正在编译内核目录&#x2F;out&#x2F;arch&#x2F;您的设备架构&#x2F;boot中\n如果使用Clang：1.设置环境变量PATHexport PATH=”/XXXXXX/bin:$PATH&quot;XXXXXX是你的就交叉编译器的具体路径的根目录。这个命令的含义是设置环境变量PATH，并且只在这个语句内有效。例如我的clang路径：export PATH=“/home/ubuntu/kernel/clang/bin:$PATH&quot;\n2.声明你要编译的内核架构：export ARCH=armm64export SUBARCH=arm64  \n3.为了防止环境配置错误以及后续省事简便，可以通过脚本来配置环境：在你的内核根目录中创建一个自定义命名，sh例如：touch build.sh\n脚本内容为：\n#！/bin/bashargs=&quot;-j$(nproc --all) \\ #-j$(nproc --all )这里是说用当年环境下最高的cpu线程进行编译ARCH=arm64 \\ SUBARCH=arm64 \\O=out \\ #输出路径是在当前位置的out文件夹CC=clang \\ #指定C语言文件编译器为clangCROSS_COMPILE=aarch64-linux-android- \\ #配置交叉编译的目标平台为arm64CROSS_COMPILE_ARM32=arm-linux-androideabi- \\ #配置32位交叉编译器(如果是gki内核，请删除这句)CLANG_TRIPLE=aarch64-linux-gnu- &quot; #负责交叉编译的Linux编译器#这个也不清楚干嘛用的，就是它在构建的时候，需要用到Linux的一些标准库内容#但是安卓的编译器阉割了，直接用安卓的编译，会出现很多莫名其妙的错误，所以就需要再配置一下这个编译器了#如果你的设备是32位的，这里也要修改的#最后三个的具体名称是根据你下载的交叉编译器决定的。请勿直接照抄。#先检测配置文件有没有问题并进行初次构建make $&#123;args&#125; xxx_defconfig#这里如果不加vendor，就会读取#内核源码/arch/你的设备架构/configs/里面的配置文件#这个完整路径为: 内核源码/arch/你的设备架构/configs/vendor/lineageos_pstar_defconfig#不加vendor的完整路径为:内核源码/arch/你的设备架构/configs/lineageos_pstar_defconfig#这里的args就是上面设置的临时变量args里面的内容#开始构建内核make $&#123;args&#125;\n\n编写完整脚本，保存，并在内核根目录执行如下代码：\nchmod +x build.sh./build.sh #开始编译如果后续编译出错而中途停止，重新编译前要进行如下步骤：\n#清理之前构建的残留内容make clean &amp;&amp; make mrproper#删除out文件夹，否则之前指定输出的文件夹rm -rf out#重新执行./build.sh  \n\n5.内核打包编译内核完成后，预算方式有很多种，其中一种就是使用AnyKernel3：https://github.com/osm0sis/AnyKernel3来进行预算刷入\n\n6.尾声构建内核中如果出现一些报错，你应该去GitHub里面搜索，而不是用百度到这里其实就结束了，内核编译其实就这几条，这是我第一次写通用的教程，诚挚欢迎大家指正和建议。如果有更好的方案请在讨论区留言。如果有语法错误或者描述错误也烦请您指正。另外，随着时代的更新，可能会有更好的方法，所以请大家灵活运用。\n","categories":["Android"],"tags":["教程"]},{"title":"测试","url":"/2025/10/11/%E6%B5%8B%E8%AF%95/","content":"评论测试\n","tags":["测试"]},{"title":"针对CN的VPN挑选","url":"/2025/10/20/%E9%92%88%E5%AF%B9CN%E7%9A%84VPN%E6%8C%91%E9%80%89/","content":"免责说明本帖子没有收取任何大厂的广告费，全靠我自身体验产品而得出的结论读者任何行为均与博主无关。请各位遵守当地法律法规本文章仅供参考\n国际知名的VPN(部分)\n.link-row {\n  display: flex;\n  flex-direction: column; /* 改为上下排列 */\n  align-items: center; /* 居中对齐 */\n  gap: 15px; /* 每个区块之间的间距 */\n}\n\nfigure {\n  text-align: center;\n  margin: 0;\n}\n\nfigcaption {\n  font-size: 1.4em; /* 调整文字大小 */\n  font-weight: bold; /* 加粗 */\n  margin-top: 10px; /* 与图片间距 */\n  color: skyblue; /* 可选文字颜色 */\n}\n\n\n\n  \n    \n      \n    \n    Proton\n  \n\n  \n    \n      \n    \n    Surfshark\n  \n\n   \n    \n      \n    \n    NordVpn\n  \n\n  \n    \n      \n    \n    ExpressVpn\n  \n\n\n\n开始一句话就是，在CN，就老老实实用机场吧。一部分机场起名为xxx vpn，实则本质是机场，机场和VPN不要混淆。\n要是非得追去安全和隐私，用VPN，那可以接着往下看\n**proton vpn：**  优点：  - 你购买后还要其他附加服务，如邮箱啥的  - 位于隐私安全法律严格的国家，不是十四眼，九眼那样情报共享的国家  - 0日志，不会记录用户活动缺点： - 速度较慢，隐私和速度总不能同时追求，当然，在CN，所有知名VPN速度也都差不多。\n\n**ExpressVpn：**  优点：- 速度稍微快点    缺点：- 价格较贵- 功能较少\n\n**NordVPN：**优点：- 跟protonVPN差不多    缺点：- CN很难连接\n\n**SurfsharkVPN：**优点：- 具有虚拟定位的功能  缺点：- 受网络限制，在CN可连接的只有几个国家（注意：是仅仅显示，不是如同其他VPN一样有列表却连接不了）\n\n⚠⚠⚠谨慎使用，甚至尽量别用某连VPN，某灯VPN等等这种VPN，使用VPN要认准国际有名并且用户量极大甚至0日志的那种\n总结在CN，日常使用的话能别用VPN就别用，因为速度真的慢，而且有时候还连接不上。如果真的有需求，并且连接不上，我有一方案可以尝试：  \n\nnekobox 或者clash设置为仅代理，然后再打开对应VPN app，基本可以连接成功。\n用VPN 官方给的openvpn或者WireGuard的证书或链接，去对应的app导入，可能会连接成功\n如果手机root了，也可以用透明代理这个方案\n\n","categories":["GFW"],"tags":["GFW"]}]