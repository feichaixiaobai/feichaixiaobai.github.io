<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>测试</title>
    <link href="/2025/10/11/%E6%B5%8B%E8%AF%95/"/>
    <url>/2025/10/11/%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>评论测试</p>]]></content>
    
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android kernel编译</title>
    <link href="/2025/10/10/android-kernel%E7%BC%96%E8%AF%91/"/>
    <url>/2025/10/10/android-kernel%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>首先是一个简单的自述。我是一个业余的安卓设备玩家，所以这里讲述的东西都是交流的。经验丰富的朋友可以无视。<br>其次，这个教程我详细讲一下，以帮助新手度过试错期。</p><hr><p>编译Android内核之前需要准备的东西：<br>1.有一台已经解锁bootloder的手机<br>2.一个linux环境，虚拟机，wsl，termux等都可以<br>3.能够认真耐心看教程</p><p>紧接着<br>1.首先确定您的手机代号（中文）<br>xiaomi可以访问xiaomirom.com来查找您的手机代号<br>2.从您品牌官方获取开源代码：例如小米的开源地址( <a href="https://github.com/">https://github.com/</a> MiCode&#x2F;Xiaomi_Kernel_OpenSource )<br>3.如果不想用官方的开源，可以选择第三方开源，比如LineageOS等等<br>4.如果你的机子既没有官方开源也没有第三方开源，那这个看你可以省点开源。<br>5.实践最重要！实践最重要！实践最重要！</p><hr><p>开始操作！<br>安装基本操作依赖</p><p>1.我会按照Ubuntu为例子去告诉你怎么做：<br>打开您的终端，使用以下命令来安装基本的依赖项：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs q">apt-<span class="hljs-built_in">get</span> install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git git-lfs gnupg gperf imagemagick<br>lib32ncurses5-<span class="hljs-built_in">dev</span> lib32readline-<span class="hljs-built_in">dev</span> lib32z1-<span class="hljs-built_in">dev</span> libelf-<span class="hljs-built_in">dev</span> liblz4-tool libncurses5 libncurses5-<span class="hljs-built_in">dev</span><br>libsdl1<span class="hljs-number">.2</span>-<span class="hljs-built_in">dev</span> libssl-<span class="hljs-built_in">dev</span> libxml2 libxml2-utils lzop pngcrush rsync<br>schedtool squashfs-tools xsltproc<br>zip zlib1g-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><p>如果你的系统缺少这些依赖环境，就会报错。<br>当然，上述这些并不一定能100%保证你完全不缺少依赖环境。你需要继续升级的内核和系统进行调整。</p><p>2.编译准备<br>首先要选择合适的交叉编译器：<br>小米大部分交叉编译器都兼容<br>华为：在不修改源码的情况下，仅兼容谷歌GCC。<br>一加：大部分交叉编译器都兼容</p><p>这里列举几个编译器：<br>Google的GCC交叉编译器：<br>Google GCC: aarch64-linux-android-4.9<br>打开此页面你会看到琳琅满目目的选择，<br>请按照你的安卓版本搜索，例如：android-t (安卓13)。</p><p>谷歌的Clang：<a href="https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+refs">Google Clang</a></p><p>打开此页面你会看到琳满目的选择，请按照你的Android版本搜索，例如：android-13 (Android13)。</p><p>常用的第三方交叉编译器推荐：  Proton-Clang<br>由kdrag0n开发Clang交叉编译器。详情参见项目主页。</p><p><strong>⚠⚠⚠：<br>较新版本的内核靠clang可以编译，基本不需要GCC<br>老版本的内核需要GCC或者clang+GCC，具体需要哪个编译器哪个版本，还得根据你自己的内核而定</strong></p><hr><p>3.拉取源及其工具链<br>1.拉取源码：<br>例如拉取LineageOS的内核源码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>git <span class="hljs-built_in">clone</span> https://github.com/LineageOS/android_kernel_xiaomi_sm8550.git --depth=1<br><br></code></pre></td></tr></table></figure><p>2.拉取源码后先去你的内核根目录&#x2F;arch&#x2F;arm64(根据你的设备架构来定)&#x2F;config或者&#x2F;config&#x2F;vendor里找到你的配置文件（一般来说是：机箱代号_defconfig）<br>比如说：我在一个目录下创建了一个kernel文件夹，把在kernel文件夹中取了源码并命名xxx，那外围配置文件在kernel&#x2F;xxx&#x2F;arch&#x2F;arm64&#x2F;config中或者在kernel&#x2F;xxx&#x2F; arch&#x2F;arm64&#x2F;config&#x2F;vendor中</p><p>3.如果里面没有config文件，那么你就需要从你的官方boot里面解压出来了，先下载或者从你的设备上解压出来，上传到Linux里面环境，cd到内核源码里面，执行scripts&#x2F;extract-ikconfig工具提取配置信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-built_in">cd</span> 你的内核源码路径<br>./scripts/extract-ikconfig 你的boot分区文件路径 &gt;&gt; device_config<br><span class="hljs-built_in">cp</span> device_config <span class="hljs-built_in">arch</span>/你的设备cpu架构/configs/你的设备代号_config<br><span class="hljs-comment">#或者这样</span><br><span class="hljs-built_in">cp</span> device_config <span class="hljs-built_in">arch</span>/你的cpu架构/configs/temp device_config<br><span class="hljs-comment">#取一个临时的名称</span><br></code></pre></td></tr></table></figure><hr><p>4.开始编译<br>cd到你的内核源码路径</p><p>如果使用GCC：<br>1.设置环境变量PATH：</p><p><code>exprot PATH=&quot;/XXXXXX/bin:$PATH&quot;</code></p><p>XXXXXX是你的就交叉编译器的具体路径的根目录。<br>这个命令的含义是设置环境变量PATH，并且只在这个语句内有效。<br>例如我的交叉编译器路径是：<br>export PATH&#x3D;“&#x2F;home&#x2F;ubuntu&#x2F;gcc_4.9&#x2F;bin:$PATH”</p><p>2.声明你要编译的内核架构：</p><p><code>export ARCH=arm64</code></p><p><code>export SUBARCH=arm64</code></p><p>3.声明交叉编译器的：<br>export CROSS_COMPILE&#x3D;aarch64-linux-gnu-<br>该命令的含义是声明交叉编译器的名称是aarch64-linux-gnu-，<br><em><strong>注意名称</strong>-<strong>是必须的。<br>这个名称的具体名称是根据您下载的交叉器编译器决定的。请勿直接照抄。</strong></em></p><p>4.声明你要编译内核的defconfig：<br><code>make ARCH=arm64 O=out XXXXX_defconfig </code><br>这个的含义是在ARM64架构下，使用指定的内核名称（XXXXX）生成一个默认的配置文件，该配置文件包含了编译内核所需的配置信息，如启用或禁用的功能、驱动程序选项等。</p><p>O&#x3D;out：此参数用于指定构建输出目录的参数。通常情况下，内核编译生成的文件放在指定的输出目录中，以保持项目的整洁性。</p><p>这样你出来编译的内核就可以放在内核中根目录的&#x2F;out&#x2F;arch&#x2F;arm64&#x2F;boot&#x2F;内。一般编译出来的是Image.gz或者Image。gz-dtb。</p><hr><p>5.运行编译<br><code>make ARCH=arm64 O=out -jX 2&gt;&amp;1 | tee kernel_log.log</code><br>这个命令，用于编译Linux内核，把编译过程中的标准输出和标准错误输出同时输出到一个文件kernel_log.log中。<br>这样假设你可以编译错误了，在kernel_log.log内查询你的错误，方便你修改错误。<br>-jX:这个参数用于指定硬件编译的线程数，其中 X 应该替换为一个整数。这允许同时编译多个文件，以加快编译过程。通常，X 的值会设置为计算机上可用的CPU核心数量乘以2，以最大程度利用系统资源。<br>例如我的CPU有4个核心，就使用-j8。</p><hr><p>6.等待编译中结果<br>路径报错，需要您根据报错内容去解决错误，<br>一般编译产物正在编译内核目录&#x2F;out&#x2F;arch&#x2F;您的设备架构&#x2F;boot中</p><p>如果使用Clang：<br>1.设置环境变量PATH<br><code>export PATH=”/XXXXXX/bin:$PATH&quot;</code><br>XXXXXX是你的就交叉编译器的具体路径的根目录。<br>这个命令的含义是设置环境变量PATH，并且只在这个语句内有效。<br>例如我的clang路径：<br><code>export PATH=“/home/ubuntu/kernel/clang/bin:$PATH&quot;</code></p><p>2.声明你要编译的内核架构：<br><code>export ARCH=armm64</code><br><code>export SUBARCH=arm64</code>  </p><p>3.为了防止环境配置错误以及后续省事简便，可以通过脚本来配置环境：<br>在你的内核根目录中创建一个自定义命名，sh<br>例如：touch build.sh</p><p>脚本内容为：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nix"><br><span class="hljs-comment">#！/bin/bash</span><br>a<span class="hljs-attr">rgs</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;-j$(nproc --all) <span class="hljs-char escape_">\ </span>#-j$(nproc --all )这里是说用当年环境下最高的cpu线程进行编译</span><br><span class="hljs-string">ARCH=arm64 <span class="hljs-char escape_">\ </span></span><br><span class="hljs-string">SUBARCH=arm64 \</span><br><span class="hljs-string">O=out <span class="hljs-char escape_">\ </span>#输出路径是在当前位置的out文件夹</span><br><span class="hljs-string">CC=clang <span class="hljs-char escape_">\ </span>#指定C语言文件编译器为clang</span><br><span class="hljs-string">CROSS_COMPILE=aarch64-linux-android- <span class="hljs-char escape_">\ </span>#配置交叉编译的目标平台为arm64</span><br><span class="hljs-string">CROSS_COMPILE_ARM32=arm-linux-androideabi- <span class="hljs-char escape_">\ </span>#配置32位交叉编译器(如果是gki内核，请删除这句)</span><br><span class="hljs-string">CLANG_TRIPLE=aarch64-linux-gnu- &quot;</span> <span class="hljs-comment">#负责交叉编译的Linux编译器</span><br><span class="hljs-comment">#这个也不清楚干嘛用的，就是它在构建的时候，需要用到Linux的一些标准库内容</span><br><span class="hljs-comment">#但是安卓的编译器阉割了，直接用安卓的编译，会出现很多莫名其妙的错误，所以就需要再配置一下这个编译器了</span><br><span class="hljs-comment">#如果你的设备是32位的，这里也要修改的</span><br><span class="hljs-comment">#最后三个的具体名称是根据你下载的交叉编译器决定的。请勿直接照抄。</span><br><span class="hljs-comment">#先检测配置文件有没有问题并进行初次构建</span><br>make $&#123;args&#125; xxx_defconfig<br><span class="hljs-comment">#这里如果不加vendor，就会读取</span><br><span class="hljs-comment">#内核源码/arch/你的设备架构/configs/里面的配置文件</span><br><span class="hljs-comment">#这个完整路径为: 内核源码/arch/你的设备架构/configs/vendor/lineageos_pstar_defconfig</span><br><span class="hljs-comment">#不加vendor的完整路径为:内核源码/arch/你的设备架构/configs/lineageos_pstar_defconfig</span><br><br><span class="hljs-comment">#这里的args就是上面设置的临时变量args里面的内容</span><br><span class="hljs-comment">#开始构建内核</span><br>make $&#123;args&#125;<br></code></pre></td></tr></table></figure><p>编写完整脚本，保存，并在内核根目录执行如下代码：</p><p><code>chmod +x build.sh</code><br><code>./build.sh</code> #开始编译<br>如果后续编译出错而中途停止，重新编译前要进行如下步骤：</p><p>#清理之前构建的残留内容<br><code>make clean &amp;&amp; make mrproper</code><br>#删除out文件夹，否则之前指定输出的文件夹<br><code>rm -rf out</code><br>#重新执行<br><code>./build.sh</code>  </p><hr><p>5.内核打包<br>编译内核完成后，预算方式有很多种，其中一种就是使用AnyKernel3：<br><a href="https://github.com/osm0sis/AnyKernel3">https://github.com/osm0sis/AnyKernel3</a><br>来进行预算刷入</p><hr><p>6.尾声<br>构建内核中如果出现一些报错，你应该去GitHub里面搜索，而不是用百度<br>到这里其实就结束了，内核编译其实就这几条，这是我第一次写通用的教程，诚挚欢迎大家指正和建议。如果有更好的方案请在讨论区留言。如果有语法错误或者描述错误也烦请您指正。另外，随着时代的更新，可能会有更好的方法，所以请大家灵活运用。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
