<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>AndroidROM编译</title>
    <link href="/2025/10/18/AndroidROM%E7%BC%96%E8%AF%91/"/>
    <url>/2025/10/18/AndroidROM%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p><strong>⚠⚠⚠：此教程仅适用于能解锁bootloader的机型，如：米，一加，pixel……</strong><br>Android Rom的编译非常吃配置和硬盘，Android版本越高，Android源码越来越大，所需要硬盘空间也是越来越大。VPS同理，如果你有💴，可以选择VPS，建议选择境外VPS。</p><p>以最新的android16配置为例：<br>最低配置：CPU 4–8 核，16 GB RAM（尽可能 32GB），至少 500 GB SSD（最好 NVMe），启用 zram&#x2F;swap。可做小规模或实验性构建，但会非常慢且容易 OOM<br>推荐配置：8–16 核&#x2F;16+ 线程，32–64 GB RAM，1 TB NVMe SSD（源码+构建输出至少留 400GB 可用）。这样能较顺畅地做全量与增量构建。<br>理想配置：大量核（32+ 逻辑核）、64 GB 或更多 RAM（Google 推荐 64 GB）、2 TB+ NVMe（或多盘分区），配合 ccache &#x2F; distcc &#x2F; ramdisk，可显著加速。官方内部使用多核 + 64GB 举例。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>可编译的开源类原生：<br><a href="https://lineageos.org/">lineageOS</a><br><a href="https://grapheneos.org/">GrapheneOS</a> (仅限pixel)<br><a href="https://crdroid.net/">Crdroid</a><br><a href="https://evolution-x.org/">EvolutionOS</a><br><a href="https://risingosrevived.tech/">RisingOS</a><br><a href="https://derpfest.org/">DrepFest</a><br>……  </p><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><p><strong>本文以Xiaomi13 lineageOS为例</strong>  </p><h2 id="安装工具"><a href="#安装工具" class="headerlink" title="安装工具"></a>安装工具</h2><p>如果您之前没有安装过adb和fastboot，可以从<a href="https://dl.google.com/android/repository/platform-tools-latest-linux.zip">Google</a> 下载。运行以下命令解压：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">unzip platform-tools-latest-linux.zip -d ~<br></code></pre></td></tr></table></figure><p><strong>提示：该文件的名称可能与此命令中的名称不完全相同，因此请进行相应调整。</strong></p><p>现在你需要将adb和添加fastboot到你的 PATH 中。打开~&#x2F;.profile并添加以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># add Android SDK platform tools to path</span><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/platform-tools&quot;</span> ] ; <span class="hljs-keyword">then</span><br>    PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/platform-tools:<span class="hljs-variable">$PATH</span>&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>然后，运行source ~&#x2F;.profile以更新您的环境。</p><h2 id="安装构建包"><a href="#安装构建包" class="headerlink" title="安装构建包"></a>安装构建包</h2><p>构建 LineageOS 需要几个软件包。您可以使用发行版的软件包管理器来安装它们。</p><p><strong>提示： Linux 中的软件包管理器是一个用于在计算机上安装或删除软件（通常来自互联网）的系统。在 Ubuntu 系统中，您可以使用 Ubuntu 软件中心。更棒的是，您还可以apt install 直接在终端中使用该命令。</strong><br>要构建 LineageOS，您需要：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bc bison build-essential ccache curl flex g++-multilib gcc-multilib git git-lfs gnupg gperf imagemagick protobuf-compiler python3-protobuf lib32readline-dev lib32z1-dev libdw-dev libelf-dev lz4 libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools xsltproc zip zlib1g-dev<br></code></pre></td></tr></table></figure><p>对于 Ubuntu 23.10（mantic）或更新版本，请libncurses5从 23.04（lunar）进行安装，如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget https://archive.ubuntu.com/ubuntu/pool/universe/n/ncurses/libtinfo5_6.3-2_amd64.deb &amp;&amp; <span class="hljs-built_in">sudo</span> dpkg -i libtinfo5_6.3-2_amd64.deb &amp;&amp; <span class="hljs-built_in">rm</span> -f libtinfo5_6.3-2_amd64.deb<br>wget https://archive.ubuntu.com/ubuntu/pool/universe/n/ncurses/libncurses5_6.3-2_amd64.deb &amp;&amp; <span class="hljs-built_in">sudo</span> dpkg -i libncurses5_6.3-2_amd64.deb &amp;&amp; <span class="hljs-built_in">rm</span> -f libncurses5_6.3-2_amd64.deb<br></code></pre></td></tr></table></figure><p>对于早于 23.10（mantic）的 Ubuntu 版本，只需安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">lib32ncurses5-dev libncurses5 libncurses5-dev<br></code></pre></td></tr></table></figure><p>此外，对于早于 20.04（focal）的 Ubuntu 版本，还需要安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">libwxgtk3.0-dev<br></code></pre></td></tr></table></figure><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>不同版本的 LineageOS 需要不同的 JDK（Java 开发工具包）版本。</p><ul><li>LineageOS 18.1+：OpenJDK 11（包含在源下载中）  </li><li>LineageOS 16.0-17.1：OpenJDK 1.9（包含在源下载中）  </li><li>LineageOS 14.1-15.1：OpenJDK 1.8（安装openjdk-8-jdk）<br><strong>注意：要构建这些版本，您需要从中删除TLSv1和。TLSv1.1jdk.tls.disabledAlgorithms&#x2F;etc&#x2F;java-8-openjdk&#x2F;security&#x2F;java.security</strong></li><li>LineageOS 11.0-13.0：OpenJDK 1.7（安装openjdk-7-jdk）</li></ul><p><strong>Ubuntu 16.04 及更新版本在标准软件包仓库中没有 OpenJDK 1.7。请参阅Ask Ubuntu问题“如何在 Ubuntu 16.04 或更高版本上安装 openjdk 7？ ”。请注意，使用 PPA openjdk-r 的建议已过时（PPA 从未更新其提供的 openjdk-7-jdk，因此缺少安全修复）；即使该答案获得最多赞，也请跳过。</strong></p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>不同版本的 LineageOS 需要不同的默认 Python 版本。</p><ul><li>LineageOS 17.1+：Python 3（安装python-is-python3）  </li><li>LineageOS 11.0-16.0：Python 2（安装python-is-python2）</li></ul><p>如果您的默认设置是python3，但您正在构建需要 的分支python2，则有多种方法可以使用它，例如手动进行符号链接或为其创建虚拟环境。我们推荐后者：</p><p>使用 生成虚拟环境virtualenv –python&#x3D;python2 <del>&#x2F;.lineage_venv。<br>之后，在每个需要的终端中python2运行 来激活它</del>&#x2F;.lineage_venv&#x2F;bin&#x2F;activate。</p><p>路径~&#x2F;.lineage_venv可以自由选择，这只是一个例子！</p><h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><p>您需要在构建环境中设置一些目录。</p><p>要创建它们：</p><p><code>mkdir -p ~/bin</code><br><code>mkdir -p ~/android/lineage</code><br>该<del>&#x2F;bin目录将包含 git-repo 工具（通常称为“repo”），并且该</del>&#x2F;android&#x2F;lineage目录将包含 LineageOS 的源代码。</p><h3 id="安装repo命令"><a href="#安装repo命令" class="headerlink" title="安装repo命令"></a>安装repo命令</h3><p>输入以下内容下载repo二进制文件并使其可执行（可运行）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://storage.googleapis.com/git-repo-downloads/repo &gt; ~/bin/repo<br><span class="hljs-built_in">chmod</span> a+x ~/bin/repo<br></code></pre></td></tr></table></figure><h3 id="将-bin目录放入执行路径中"><a href="#将-bin目录放入执行路径中" class="headerlink" title="将~&#x2F;bin目录放入执行路径中"></a>将~&#x2F;bin目录放入执行路径中</h3><p>在较新版本的 Ubuntu 中，它<del>&#x2F;bin应该已经存在于你的 PATH 中。你可以使用文本编辑器打开</del>&#x2F;.profile并验证以下代码是否存在（如果缺少，请添加）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#set PATH so it includes user&#x27;s private bin if it exists</span><br><span class="hljs-keyword">if</span> [ -d <span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/bin&quot;</span> ] ; <span class="hljs-keyword">then</span><br>    PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><p>然后，运行source ~&#x2F;.profile以更新您的环境。</p><h3 id="配置-git"><a href="#配置-git" class="headerlink" title="配置 git"></a>配置 git</h3><p>鉴于repo需要您识别自己才能同步 Android，请运行以下命令来配置您的git身份：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.email <span class="hljs-string">&quot;you@example.com&quot;</span>  <br>git config --global user.name <span class="hljs-string">&quot;Your Name&quot;</span><br>```  <br><br>由于规模较大，某些仓库配置为lfs或Large File Storage。为确保您的发行版已为此做好准备，请运行：<br><br>`git lfs install`<br><br>为了避免Change-Id:提交消息中出现重复的尾部，尤其是在挑选更改时，请Change-Id:向 git 制作一个已知的尾部：<br><br>`git config --global trailer.changeid.key <span class="hljs-string">&quot;Change-Id&quot;</span>`  <br><br><span class="hljs-comment">### 开启缓存以加速构建</span><br><br>ccache如果您想通过运行以下命令来加速后续构建：<br><br>```bash<br><span class="hljs-built_in">export</span> USE_CCACHE=1<br><span class="hljs-built_in">export</span> CCACHE_EXEC=/usr/bin/ccache<br></code></pre></td></tr></table></figure><p>并将该行添加到文件中。然后，输入以下命令~&#x2F;.bashrc指定要使用的最大磁盘空间量：ccache</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ccache -M 50G<br></code></pre></td></tr></table></figure><p>其中50G对应 50GB 的缓存。此操作只需运行一次。25GB 到 100GB 之间的任何缓存都会显著提升构建速度（例如，通常 1 小时的构建时间可以缩短到 20 分钟）。如果您只为一台设备构建，25GB 到 50GB 的缓存就足够了。如果您计划为多台不共享相同内核源码的设备构建，则建议使用 75GB 到 100GB 的缓存。这些空间将永久占用您的硬盘空间，因此请考虑到这一点。</p><p>您还可以启用可选的ccache压缩功能。虽然这可能会略微降低性能，但它会增加缓存中可容纳的文件数量。要启用此功能，请运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ccache -o compression=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>注意：如果启用压缩，ccache大小可能会更低（每个设备的目标大小约为 20GB）。</p><h2 id="初始化-LineageOS-源存储库"><a href="#初始化-LineageOS-源存储库" class="headerlink" title="初始化 LineageOS 源存储库"></a>初始化 LineageOS 源存储库</h2><p>输入以下内容来初始化存储库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/android/lineage<br>repo init -u https://github.com/LineageOS/android.git -b lineage-23.0 --git-lfs --no-clone-bundle<br></code></pre></td></tr></table></figure><h3 id="下载源代码"><a href="#下载源代码" class="headerlink" title="下载源代码"></a>下载源代码</h3><p>要开始将源代码下载到您的计算机，请输入以下内容：</p><p><code>repo sync</code><br>LineageOS 清单包含一个合理的 repo 默认配置，我们强烈建议您使用（即不添加任何同步选项）。作为参考，我们的默认值为-j 4和-c。该-j 4部分表示同时支持四个线程&#x2F;连接。如果您在同步时遇到问题，可以将其降低到-j 3或-j 2。另一方面，-c使 repo 仅提取当前分支，而不是 GitHub 上所有可用的分支。</p><p><strong>注意：这可能需要一段时间，具体取决于您的网速。在此期间，您可以去喝杯啤酒&#x2F;咖啡&#x2F;茶&#x2F;小睡一会儿！</strong></p><p><strong>提示：该repo sync命令用于更新 LineageOS 和 Google 的最新源代码。请记住这一点，因为您可能需要每隔几天执行一次，以保持代码库的新鲜和最新。但请注意，如果您进行了任何更改，运行该命令repo sync可能会将其清除！</strong></p><h2 id="准备构建环境"><a href="#准备构建环境" class="headerlink" title="准备构建环境"></a>准备构建环境</h2><p>进入源代码的根目录：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/android/lineage<br>```  <br><br>设置您的构建环境：<br><br>```bash<br><span class="hljs-built_in">source</span> build/envsetup.sh<br></code></pre></td></tr></table></figure><p>您可以通过输入以下命令来检查命令是否正确执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">croot<br></code></pre></td></tr></table></figure><p>然后，您的 shell 将导航到源的根目录，~&#x2F;android&#x2F;lineage或者给出错误。</p><p>准备特定于设备的代码<br><code>breakfast fuxi</code></p><p>这将下载您设备的特定配置和 内核。</p><h3 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h3><p>重要提示：某些设备需要先填充供应商目录，早餐操作才能成功。如果您在此处收到有关供应商 makefile 的错误，请跳转到提取专有 blob。早餐操作的第一部分应该已经成功，完成后您可以重新运行 breakfast  </p><h3 id="提取专有-blob"><a href="#提取专有-blob" class="headerlink" title="提取专有 blob"></a>提取专有 blob</h3><p>注意： 此步骤需要您拥有一个已运行最新 LineageOS 的设备，该版本基于您想要构建的分支。如果您没有这样的设备，请参阅从可安装 zip 文件中提取专有 blob。<br>现在，请确保您的小米 13 已通过 USB 数据线连接到电脑，并启用 ADB 和 root 权限，并且位于该 ~&#x2F;android&#x2F;lineage&#x2F;device&#x2F;xiaomi&#x2F;fuxi文件夹中。<br>然后运行以下extract-files.sh脚本extract-files.py：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./extract-files.sh<br></code></pre></td></tr></table></figure><p>或者，对于 Python 脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./extract-files.py<br></code></pre></td></tr></table></figure><p>这些 Blob 应该被拉入<del>&#x2F;android&#x2F;lineage&#x2F;vendor&#x2F;xiaomi文件夹。如果您看到“命令未找到”错误，adb可能需要将其放入</del>&#x2F;bin。</p><h2 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h2><p>开始构建吧！<br>现在，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">croot<br>brunch fuxi<br></code></pre></td></tr></table></figure><p>构建应该开始。</p><h2 id="安装构建"><a href="#安装构建" class="headerlink" title="安装构建"></a>安装构建</h2><p>假设构建完成且没有错误（完成后会很明显），在构建运行的终端窗口中输入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> <span class="hljs-variable">$OUT</span><br></code></pre></td></tr></table></figure><p>在那里，您可以找到所有已创建的文件。比较有趣的两个文件是：</p><ul><li>recovery.img，这是 LineageOS 恢复映像。  </li><li>lineage-23.0-20251017-UNOFFICIAL-fuxi.zip，即 LineageOS 安装包。</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>编译成功后，你就可以通过twrp或者fastboot刷入编译后的产物，测试是否能开机，并修bug</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试</title>
    <link href="/2025/10/11/%E6%B5%8B%E8%AF%95/"/>
    <url>/2025/10/11/%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p>评论测试</p>]]></content>
    
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android kernel编译</title>
    <link href="/2025/10/10/android-kernel%E7%BC%96%E8%AF%91/"/>
    <url>/2025/10/10/android-kernel%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>首先是一个简单的自述。我是一个业余的安卓设备玩家，所以这里讲述的东西都是交流的。经验丰富的朋友可以无视。<br>其次，这个教程我详细讲一下，以帮助新手度过试错期。</p><hr><p>编译Android内核之前需要准备的东西：<br>1.有一台已经解锁bootloder的手机<br>2.一个linux环境，虚拟机，wsl，termux等都可以<br>3.能够认真耐心看教程</p><p>紧接着<br>1.首先确定您的手机代号（中文）<br>xiaomi可以访问xiaomirom.com来查找您的手机代号<br>2.从您品牌官方获取开源代码：例如小米的开源地址( <a href="https://github.com/">https://github.com/</a> MiCode&#x2F;Xiaomi_Kernel_OpenSource )<br>3.如果不想用官方的开源，可以选择第三方开源，比如LineageOS等等<br>4.如果你的机子既没有官方开源也没有第三方开源，那这个看你可以省点开源。<br>5.实践最重要！实践最重要！实践最重要！</p><hr><p>开始操作！<br>安装基本操作依赖</p><p>1.我会按照Ubuntu为例子去告诉你怎么做：<br>打开您的终端，使用以下命令来安装基本的依赖项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install -y bc bison build-essential ccache curl flex g++-multilib gcc-multilib git git-lfs gnupg gperf imagemagick<br>lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5 libncurses5-dev<br>libsdl1.2-dev libssl-dev libxml2 libxml2-utils lzop pngcrush rsync<br>schedtool squashfs-tools xsltproc<br>zip zlib1g-dev<br></code></pre></td></tr></table></figure><p>如果你的系统缺少这些依赖环境，就会报错。<br>当然，上述这些并不一定能100%保证你完全不缺少依赖环境。你需要继续升级的内核和系统进行调整。</p><p>2.编译准备<br>首先要选择合适的交叉编译器：<br>小米大部分交叉编译器都兼容<br>华为：在不修改源码的情况下，仅兼容谷歌GCC。<br>一加：大部分交叉编译器都兼容</p><p>这里列举几个编译器：<br>Google的GCC交叉编译器：<br>Google GCC: aarch64-linux-android-4.9<br>打开此页面你会看到琳琅满目目的选择，<br>请按照你的安卓版本搜索，例如：android-t (安卓13)。</p><p>谷歌的Clang：<a href="https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+refs">Google Clang</a></p><p>打开此页面你会看到琳满目的选择，请按照你的Android版本搜索，例如：android-13 (Android13)。</p><p>常用的第三方交叉编译器推荐：  Proton-Clang<br>由kdrag0n开发Clang交叉编译器。详情参见项目主页。</p><p><strong>⚠⚠⚠：<br>较新版本的内核靠clang可以编译，基本不需要GCC<br>老版本的内核需要GCC或者clang+GCC，具体需要哪个编译器哪个版本，还得根据你自己的内核而定</strong></p><hr><p>3.拉取源及其工具链<br>1.拉取源码：<br>例如拉取LineageOS的内核源码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>git <span class="hljs-built_in">clone</span> https://github.com/LineageOS/android_kernel_xiaomi_sm8550.git --depth=1<br><br></code></pre></td></tr></table></figure><p>2.拉取源码后先去你的内核根目录&#x2F;arch&#x2F;arm64(根据你的设备架构来定)&#x2F;config或者&#x2F;config&#x2F;vendor里找到你的配置文件（一般来说是：机箱代号_defconfig）<br>比如说：我在一个目录下创建了一个kernel文件夹，把在kernel文件夹中取了源码并命名xxx，那外围配置文件在kernel&#x2F;xxx&#x2F;arch&#x2F;arm64&#x2F;config中或者在kernel&#x2F;xxx&#x2F; arch&#x2F;arm64&#x2F;config&#x2F;vendor中</p><p>3.如果里面没有config文件，那么你就需要从你的官方boot里面解压出来了，先下载或者从你的设备上解压出来，上传到Linux里面环境，cd到内核源码里面，执行scripts&#x2F;extract-ikconfig工具提取配置信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-built_in">cd</span> 你的内核源码路径<br>./scripts/extract-ikconfig 你的boot分区文件路径 &gt;&gt; device_config<br><span class="hljs-built_in">cp</span> device_config <span class="hljs-built_in">arch</span>/你的设备cpu架构/configs/你的设备代号_config<br><span class="hljs-comment">#或者这样</span><br><span class="hljs-built_in">cp</span> device_config <span class="hljs-built_in">arch</span>/你的cpu架构/configs/temp device_config<br><span class="hljs-comment">#取一个临时的名称</span><br></code></pre></td></tr></table></figure><hr><p>4.开始编译<br>cd到你的内核源码路径</p><p>如果使用GCC：<br>1.设置环境变量PATH：</p><p><code>exprot PATH=&quot;/XXXXXX/bin:$PATH&quot;</code></p><p>XXXXXX是你的就交叉编译器的具体路径的根目录。<br>这个命令的含义是设置环境变量PATH，并且只在这个语句内有效。<br>例如我的交叉编译器路径是：<br>export PATH&#x3D;“&#x2F;home&#x2F;ubuntu&#x2F;gcc_4.9&#x2F;bin:$PATH”</p><p>2.声明你要编译的内核架构：</p><p><code>export ARCH=arm64</code></p><p><code>export SUBARCH=arm64</code></p><p>3.声明交叉编译器的：<br>export CROSS_COMPILE&#x3D;aarch64-linux-gnu-<br>该命令的含义是声明交叉编译器的名称是aarch64-linux-gnu-，<br><em><strong>注意名称</strong>-<strong>是必须的。<br>这个名称的具体名称是根据您下载的交叉器编译器决定的。请勿直接照抄。</strong></em></p><p>4.声明你要编译内核的defconfig：<br><code>make ARCH=arm64 O=out XXXXX_defconfig </code><br>这个的含义是在ARM64架构下，使用指定的内核名称（XXXXX）生成一个默认的配置文件，该配置文件包含了编译内核所需的配置信息，如启用或禁用的功能、驱动程序选项等。</p><p>O&#x3D;out：此参数用于指定构建输出目录的参数。通常情况下，内核编译生成的文件放在指定的输出目录中，以保持项目的整洁性。</p><p>这样你出来编译的内核就可以放在内核中根目录的&#x2F;out&#x2F;arch&#x2F;arm64&#x2F;boot&#x2F;内。一般编译出来的是Image.gz或者Image。gz-dtb。</p><hr><p>5.运行编译<br><code>make ARCH=arm64 O=out -jX 2&gt;&amp;1 | tee kernel_log.log</code><br>这个命令，用于编译Linux内核，把编译过程中的标准输出和标准错误输出同时输出到一个文件kernel_log.log中。<br>这样假设你可以编译错误了，在kernel_log.log内查询你的错误，方便你修改错误。<br>-jX:这个参数用于指定硬件编译的线程数，其中 X 应该替换为一个整数。这允许同时编译多个文件，以加快编译过程。通常，X 的值会设置为计算机上可用的CPU核心数量乘以2，以最大程度利用系统资源。<br>例如我的CPU有4个核心，就使用-j8。</p><hr><p>6.等待编译中结果<br>路径报错，需要您根据报错内容去解决错误，<br>一般编译产物正在编译内核目录&#x2F;out&#x2F;arch&#x2F;您的设备架构&#x2F;boot中</p><p>如果使用Clang：<br>1.设置环境变量PATH<br><code>export PATH=”/XXXXXX/bin:$PATH&quot;</code><br>XXXXXX是你的就交叉编译器的具体路径的根目录。<br>这个命令的含义是设置环境变量PATH，并且只在这个语句内有效。<br>例如我的clang路径：<br><code>export PATH=“/home/ubuntu/kernel/clang/bin:$PATH&quot;</code></p><p>2.声明你要编译的内核架构：<br><code>export ARCH=armm64</code><br><code>export SUBARCH=arm64</code>  </p><p>3.为了防止环境配置错误以及后续省事简便，可以通过脚本来配置环境：<br>在你的内核根目录中创建一个自定义命名，sh<br>例如：touch build.sh</p><p>脚本内容为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br><span class="hljs-comment">#！/bin/bash</span><br>args=<span class="hljs-string">&quot;-j<span class="hljs-subst">$(nproc --all)</span> \ #-j<span class="hljs-subst">$(nproc --all )</span>这里是说用当年环境下最高的cpu线程进行编译</span><br><span class="hljs-string">ARCH=arm64 \ </span><br><span class="hljs-string">SUBARCH=arm64 \</span><br><span class="hljs-string">O=out \ #输出路径是在当前位置的out文件夹</span><br><span class="hljs-string">CC=clang \ #指定C语言文件编译器为clang</span><br><span class="hljs-string">CROSS_COMPILE=aarch64-linux-android- \ #配置交叉编译的目标平台为arm64</span><br><span class="hljs-string">CROSS_COMPILE_ARM32=arm-linux-androideabi- \ #配置32位交叉编译器(如果是gki内核，请删除这句)</span><br><span class="hljs-string">CLANG_TRIPLE=aarch64-linux-gnu- &quot;</span> <span class="hljs-comment">#负责交叉编译的Linux编译器</span><br><span class="hljs-comment">#这个也不清楚干嘛用的，就是它在构建的时候，需要用到Linux的一些标准库内容</span><br><span class="hljs-comment">#但是安卓的编译器阉割了，直接用安卓的编译，会出现很多莫名其妙的错误，所以就需要再配置一下这个编译器了</span><br><span class="hljs-comment">#如果你的设备是32位的，这里也要修改的</span><br><span class="hljs-comment">#最后三个的具体名称是根据你下载的交叉编译器决定的。请勿直接照抄。</span><br><span class="hljs-comment">#先检测配置文件有没有问题并进行初次构建</span><br>make <span class="hljs-variable">$&#123;args&#125;</span> xxx_defconfig<br><span class="hljs-comment">#这里如果不加vendor，就会读取</span><br><span class="hljs-comment">#内核源码/arch/你的设备架构/configs/里面的配置文件</span><br><span class="hljs-comment">#这个完整路径为: 内核源码/arch/你的设备架构/configs/vendor/lineageos_pstar_defconfig</span><br><span class="hljs-comment">#不加vendor的完整路径为:内核源码/arch/你的设备架构/configs/lineageos_pstar_defconfig</span><br><br><span class="hljs-comment">#这里的args就是上面设置的临时变量args里面的内容</span><br><span class="hljs-comment">#开始构建内核</span><br>make <span class="hljs-variable">$&#123;args&#125;</span><br></code></pre></td></tr></table></figure><p>编写完整脚本，保存，并在内核根目录执行如下代码：</p><p><code>chmod +x build.sh</code><br><code>./build.sh</code> #开始编译<br>如果后续编译出错而中途停止，重新编译前要进行如下步骤：</p><p>#清理之前构建的残留内容<br><code>make clean &amp;&amp; make mrproper</code><br>#删除out文件夹，否则之前指定输出的文件夹<br><code>rm -rf out</code><br>#重新执行<br><code>./build.sh</code>  </p><hr><p>5.内核打包<br>编译内核完成后，预算方式有很多种，其中一种就是使用AnyKernel3：<br><a href="https://github.com/osm0sis/AnyKernel3">https://github.com/osm0sis/AnyKernel3</a><br>来进行预算刷入</p><hr><p>6.尾声<br>构建内核中如果出现一些报错，你应该去GitHub里面搜索，而不是用百度<br>到这里其实就结束了，内核编译其实就这几条，这是我第一次写通用的教程，诚挚欢迎大家指正和建议。如果有更好的方案请在讨论区留言。如果有语法错误或者描述错误也烦请您指正。另外，随着时代的更新，可能会有更好的方法，所以请大家灵活运用。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
